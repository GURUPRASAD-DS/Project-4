# -*- coding: utf-8 -*-
"""Multipledisease_app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yMl54Cq78Klh5eiriulLIViTQ58u7Yt8
"""

!pip install streamlit

import streamlit as st
import pickle
import numpy as np

# Load models
parkinson_model = pickle.load(open('/content/parkinson_model.pkl', 'rb'))
kidney_model = pickle.load(open('/content/kidney_model (1).pkl', 'rb'))
liver_model = pickle.load(open('/content/liver_model (1).pkl', 'rb'))

st.title("ü©∫ Multiple Disease Prediction System")

# Sidebar navigation
option = st.sidebar.selectbox("Select Disease to Predict", ["Parkinson's", "Kidney Disease", "Liver Disease"])

# ------------------------------
# 1Ô∏è‚É£ Parkinson's Inputs (22)
# ------------------------------
if option == "Parkinson's":
    st.header("Parkinson's Disease Prediction")

    fo = st.number_input('MDVP:Fo(Hz)')
    fhi = st.number_input('MDVP:Fhi(Hz)')
    flo = st.number_input('MDVP:Flo(Hz)')
    jitter_percent = st.number_input('MDVP:Jitter(%)')
    jitter_abs = st.number_input('MDVP:Jitter(Abs)')
    rap = st.number_input('MDVP:RAP')
    ppq = st.number_input('MDVP:PPQ')
    ddp = st.number_input('Jitter:DDP')
    shimmer = st.number_input('MDVP:Shimmer')
    shimmer_db = st.number_input('MDVP:Shimmer(dB)')
    apq3 = st.number_input('Shimmer:APQ3')
    apq5 = st.number_input('Shimmer:APQ5')
    apq = st.number_input('MDVP:APQ')
    dda = st.number_input('Shimmer:DDA')
    nhr = st.number_input('NHR')
    hnr = st.number_input('HNR')
    rpde = st.number_input('RPDE')
    dfa = st.number_input('DFA')
    spread1 = st.number_input('spread1')
    spread2 = st.number_input('spread2')
    d2 = st.number_input('D2')
    ppe = st.number_input('PPE')

    parkinson_input = np.array([[fo, fhi, flo, jitter_percent, jitter_abs, rap, ppq, ddp,
                                 shimmer, shimmer_db, apq3, apq5, apq, dda,
                                 nhr, hnr, rpde, dfa, spread1, spread2, d2, ppe]])

    if st.button('Predict Parkinson\'s'):
        result = parkinson_model.predict(parkinson_input)
        st.success("Prediction: {}".format("Parkinson's Detected" if result[0] == 1 else "Healthy"))

# ------------------------------
# 2Ô∏è‚É£ Kidney Inputs (Example: typical CKD dataset)
# ------------------------------
elif option == "Kidney Disease":
    st.header("Kidney Disease Prediction")

    age = st.number_input('Age')
    bp = st.number_input('Blood Pressure')
    sg = st.number_input('Specific Gravity')
    al = st.number_input('Albumin')
    su = st.number_input('Sugar')
    rbc = st.selectbox('Red Blood Cells', ['normal', 'abnormal'])
    pc = st.selectbox('Pus Cell', ['normal', 'abnormal'])
    pcc = st.selectbox('Pus Cell Clumps', ['present', 'notpresent'])
    ba = st.selectbox('Bacteria', ['present', 'notpresent'])
    bgr = st.number_input('Blood Glucose Random')
    bu = st.number_input('Blood Urea')
    sc = st.number_input('Serum Creatinine')
    sod = st.number_input('Sodium')
    pot = st.number_input('Potassium')
    hemo = st.number_input('Hemoglobin')
    pcv = st.number_input('Packed Cell Volume')
    wc = st.number_input('White Blood Cell Count')
    rc = st.number_input('Red Blood Cell Count')
    htn = st.selectbox('Hypertension', ['yes', 'no'])
    dm = st.selectbox('Diabetes Mellitus', ['yes', 'no'])
    cad = st.selectbox('Coronary Artery Disease', ['yes', 'no'])
    appet = st.selectbox('Appetite', ['good', 'poor'])
    pe = st.selectbox('Pedal Edema', ['yes', 'no'])
    ane = st.selectbox('Anemia', ['yes', 'no'])

    # Encode categories as you did in training
    label_map = {'normal': 0, 'abnormal': 1, 'present': 1, 'notpresent': 0, 'yes': 1, 'no': 0, 'good': 1, 'poor': 0}
    rbc = label_map[rbc]
    pc = label_map[pc]
    pcc = label_map[pcc]
    ba = label_map[ba]
    htn = label_map[htn]
    dm = label_map[dm]
    cad = label_map[cad]
    appet = label_map[appet]
    pe = label_map[pe]
    ane = label_map[ane]

    kidney_input = np.array([[age, bp, sg, al, su, rbc, pc, pcc, ba,
                              bgr, bu, sc, sod, pot, hemo, pcv, wc, rc,
                              htn, dm, cad, appet, pe, ane]])

    if st.button('Predict Kidney Disease'):
        result = kidney_model.predict(kidney_input)
        st.success("Prediction: {}".format("CKD Detected" if result[0] == 1 else "No CKD"))

# ------------------------------
# 3Ô∏è‚É£ Liver Inputs (Example: ILPD dataset)
# ------------------------------
elif option == "Liver Disease":
    st.header("Liver Disease Prediction")

    age = st.number_input('Age')
    gender = st.selectbox('Gender', ['Male', 'Female'])
    tb = st.number_input('Total Bilirubin')
    db = st.number_input('Direct Bilirubin')
    alkphos = st.number_input('Alkaline Phosphotase')
    sgpt = st.number_input('Alamine Aminotransferase')
    sgot = st.number_input('Aspartate Aminotransferase')
    tp = st.number_input('Total Proteins')
    alb = st.number_input('Albumin')
    ag_ratio = st.number_input('Albumin and Globulin Ratio')

    # Encode Gender same way as training
    gender = 1 if gender == 'Male' else 0

    liver_input = np.array([[age, gender, tb, db, alkphos, sgpt, sgot, tp, alb, ag_ratio]])

    if st.button('Predict Liver Disease'):
        result = liver_model.predict(liver_input)
        st.success("Prediction: {}".format("Liver Disease Detected" if result[0] == 1 else "Healthy Liver"))

